A是原點		B是終點		C是第一臂跟第2臂的連接點
G點是B到AC直線的垂直交點
P為兩圓交點連線與AB點連線之交點

Scara的Scara_3axis變數流程
	thetal_A2[i] = thetal_A[i];
	thetal_B2[i] = thetal_B[i];
	thetal_Z2[i] = thetal_Z[i];
	//先把第一次A算出來的變數放入A2
	L_AB = sqrt(pow(P[0], 2) + pow(P[1], 2));
	//計算原點到終點的直線距離
	L_CG = L_AG - first_arm;	//算出C到G的距離
	L_AE = L_AB - second_arm;	//原點到以終點為圓心
								的圓的最短距離
	L_BF = L_AB - first_arm;	//終點到以圓點為圓心的
								圓的最短距離
	L_EF = L_AB - L_AE - L_BF;	//
	L_AP = (L_EF / 2) + L_AE;	//A到EF之中點的距離
	L_BP = (L_EF / 2) + L_BF;	//B到EF之中點的距離
	turn = abs(P[1] / P[0]);	//AB直線的斜率
	F_CD = (double(P[0]) / double(P[1]))*(-1);	//CD直線的斜率
								暫時無用
	thetalOne = acos(L_AP / first_arm) * 180 / PI;
		//角CAB的夾角
	thetalTwo = atan(turn) * 180 / PI;
		//角BA與X軸的夾角
		//A要轉thetalTwo的度數 需要為A來判斷C點的所在象限	
	thetalThree = asin(L_AP / first_arm) * 180 / PI;
		//角ACP的夾角
	thetalFour = asin(L_BP / second_arm) * 180 / PI;
		//角PCB的夾角
	thetalTF = 180 - thetalThree - thetalFour;
		//第2節臂所需要轉動的角度
	thetal_A[1] = thetalOne + thetalTwo;
		//第一節臂所需要轉動的角度
	if (P[0] < 0)
	{
		thetal_A[1] = 180 - thetalTwo - thetalOne;
	}
		//要是輸入的X小於0會改成手臂偏向另一邊
	thetal_Z[1] = P[2];	//把Z的值存到要傳送給子版的變數中
	thetal_B[1] = thetalTF;	
	thetal_A3[1] = thetal_A[1] - thetal_A2[1];
	//thetal_A3是把這次跟上次轉動的角度相減，
	最後要轉動的角度
	thetal_B4 = thetal_B[1] - thetal_B2[1];
	//thetal_B4是把這次跟上次轉動的角度相減，
	最後要轉動的角度
	
	****	我覺得放的位置怪怪的 計算順序要調整
	//要是這次的B跟上次相減不等於0 就讓第2節臂轉動thetal_B度
	if (thetal_B4 == 0)
	{
		thetal_B3[1] = 0;
	}	
	else
	{
		thetal_B3[1] = thetal_B[1];
	}	
	****
	
	//thetal_B3是要傳給子版的數值
	thetal_Z3[1] = thetal_Z[1] - thetal_Z2[1];
	//thetal_Z3是要傳給子版的數值
	
	//----判斷下次是正轉或反轉
	if (thetal_A3[1] < 0)
	{
		thetal_A3[0] = 1;	//[0]都是存放是否反轉
		thetal_A3[1] = -(thetal_A3[1]);	//[1]是存放轉動度數
	}	//這次的A算出來比上次少  反轉
	else
	{
		thetal_A3[0] = 0;
	}	//歸零完後往左是 = 0  >0是往右
	//
	if (thetal_B3[1] < 0)
	{
		thetal_B3[0] = 1;
		thetal_B3[1] = -(thetal_B3[1]);
	}
	else
	{
		thetal_B3[0] = 0;
	}
	//
	if (thetal_Z3[1] < 0)
	{
		thetal_Z3[0] = 1;
		thetal_Z3[1] = -(thetal_Z3[1]);
	}
	else
	{
		thetal_Z3[0] = 0;
	}
	//----******判斷下次是正轉或反轉
	
		
		
		